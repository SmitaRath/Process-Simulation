//this class is created to save all the details related to process

import java.text.DecimalFormat;
import java.util.LinkedList;

public class ProcessDetails implements Comparable<ProcessDetails> {
    //to store the process name
    String processName;
    //to store the starting time of the process
    double startingTime;
    //to store the execution time generated at the time of initialization
    double totalExecutionTime;
    //to store the execution time completed by a process
    double completedExecutionTime;
    //to store the remaining execution time
    double remainingExecutionTime;
    //to store the time at which process starts waiting in the ready queue
    double waitingTimeStart;
    //to store the total waiting time of the process spent in the ready queue
    double readyQueuetotalWaitingTime;
    //to store the mean Inter I/O Interval given by the process
    double meanInterIOInterval;
    //to store the CPU burst generated exponenetially for a process
    double CPUBurst;
    //to store the IO burst for a process
    double ioburst;
    //to store the total waiting time process spent in the IO queue
    double iowait;
    //to store the time at which process starts waiting at the IO queue
    double ioWaitingTimeStart;
    //to store the total time process executed IO operation
    double ioexecutionTime;
    //to store the remaining busrt time in case of round robin
    double remainingCPUBurstTime;
    // to store the time at which process finishes
    double finishTime;
    //to store all the CPU bursts which are generated by the process.
    LinkedList<Double> allCPUBurst;
    DecimalFormat df = new DecimalFormat("#.#####");
    //to store the status to check which process is currently executing by CPU
    String cpuStatus;
    boolean firstcycle=true;
    boolean finished=false;

    public ProcessDetails(String processName, double totalExecutionTime, double meanInterIOInterval,double remainingExecutionTime) {
        this.processName = processName;
        this.startingTime = 0;
        this.totalExecutionTime = totalExecutionTime;
        this.completedExecutionTime = 0;
        this.remainingExecutionTime = remainingExecutionTime;
        this.waitingTimeStart = 0;
        this.meanInterIOInterval = meanInterIOInterval;
        this.readyQueuetotalWaitingTime = 0;
        this.CPUBurst=0;
        this.ioburst=0;
        this.iowait=0;
        this.ioexecutionTime=0;
        this.remainingCPUBurstTime=0;
        this.finishTime=0;
        this.allCPUBurst = new LinkedList<>();
    }

    @Override
    public String toString() {
        String returnString=" ";
        for(Double dd :allCPUBurst){
            returnString = returnString + df.format(dd) + "-->";
        }

        return  String.format("Process No         " + processName + "%n" +
                "  Total Execution Time           " + df.format(totalExecutionTime) +"%n" +
                "  mean inter-I/O                 " + meanInterIOInterval + "%n" +
                "  Completed Execution Time       " + df.format(completedExecutionTime) +"%n" +
                "  Remaining Execution Time       " + df.format(remainingExecutionTime) +"%n" +
                "  Ready Queue Total Waiting Time " + df.format(readyQueuetotalWaitingTime) +"%n" +
                "  IO queue Waiting Time          " + df.format(iowait) +"%n" +
                "  IO Execution Time              " + df.format(ioexecutionTime) +"%n" +
                "  Finish Time                    " + df.format(finishTime) +"%n" +
                "  Turn Around Time               " + df.format((completedExecutionTime + readyQueuetotalWaitingTime + iowait + ioexecutionTime)) +"%n" +
                "  All CPU Bursts                 " + returnString
                );
    }


    //overriding comapreTo method to sort the process according to their execution time
    @Override
    public int compareTo(ProcessDetails o) {

            return this.totalExecutionTime > o.totalExecutionTime ? 1 : this.totalExecutionTime < o.totalExecutionTime ? -1 : 0;
    }

}
